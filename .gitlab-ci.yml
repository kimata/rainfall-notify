image: registry.green-rabbit.net:5000/kimata/local_ubuntu:250615_38f4fdb9

variables:
    UV_LINK_MODE: copy
    UV_PYTHON_INSTALL_DIR: ${CI_PROJECT_DIR}/.uv_python

stages:
    - build-image
    - pre-test
    - test
    - tag-latest
    - deploy
    - renovate
    
build-image:
    stage: build-image

    variables:
        BUILDER: arm_builder

    script:
        - 'TAG="$(date +%y%m%d)_${CI_COMMIT_SHORT_SHA}"'
        
        - 'echo "Building: ${CI_REGISTRY_IMAGE}:${TAG}"'

        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/bot-config.git
        - mv bot-config/rainfall.yaml ./config.yaml

        - docker buildx create --name ${BUILDER} --use --config /etc/buildkitd.toml
        - docker buildx use ${BUILDER}
        - echo ${CI_REGISTRY_IMAGE}:${TAG}
        - docker buildx build --provenance=false --progress=plain --platform linux/amd64,linux/arm64/v8 --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:latest --cache-to type=inline --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache,mode=max --build-arg IMAGE_BUILD_DATE=$(date --iso-8601=seconds) --tag ${CI_REGISTRY_IMAGE}:${TAG} --push .

test-prepare:
    stage: pre-test
    
    script:
        - apt update
        - apt install --yes libasound2-dev portaudio19-dev
        - uv sync --locked --no-editable
        - ls -la /root/.local/share/uv/python/
        
    artifacts:
        paths:
            - .venv
            - .uv_python

        expire_in: 1 hour

    cache:
        - key:
            files:
                - pyproject.toml
                - .gitlab-ci.yml
            prefix: ${CI_COMMIT_REF_SLUG}-venv
          paths:
            - .venv
          policy: pull-push
          
        - key: ${CI_COMMIT_REF_SLUG}-uv-toolchain
          paths:
            - .uv_python
          policy: pull-push

test-walk-through:
    stage: test

    needs:
        - job: test-prepare
          artifacts: true

    script:
        - apt update
        - apt install --yes libportaudio2
        - echo $PATH
        - source .venv/bin/activate
        - echo $PATH
        - ls -la /root/.local/share/uv/python/
        - ls -la .venv/bin
        - uv run pytest --timeout=60 --numprocesses=auto --verbosity=1 tests/test_basic.py

    cache:
        - key:
            files:
                - pyproject.toml
                - .gitlab-ci.yml
            prefix: ${CI_COMMIT_REF_SLUG}-venv
          paths:
            - .venv
          policy: pull

        - key: ${CI_COMMIT_REF_SLUG}-uv-toolchain
          paths:
            - .uv_python
          policy: pull

tag-latest:
    stage: tag-latest

    needs:
        - test-walk-through  # テストが成功した場合のみ実行

    script:
        - 'TAG="$(date +%y%m%d)_${CI_COMMIT_SHORT_SHA}"'
        - 'echo "Tagging ${CI_REGISTRY_IMAGE}:${TAG} as latest"'
        - docker pull ${CI_REGISTRY_IMAGE}:${TAG}
        - docker tag ${CI_REGISTRY_IMAGE}:${TAG} ${CI_REGISTRY_IMAGE}:latest
        - docker push ${CI_REGISTRY_IMAGE}:latest
        
    rules:
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success
          
deploy:
    stage: deploy

    dependencies: []

    image:
        name: bitnami/kubectl:latest
        entrypoint: ['']

    script:
        - 'TAG="$(date +%y%m%d)_${CI_COMMIT_SHORT_SHA}"'
        - kubectl config get-contexts
        - kubectl config use-context kimata/rainfall-notify:pod-rollout
        - kubectl --insecure-skip-tls-verify=true -n bot set image deployment/rainfall-notify-deployment rainfall-notify=${CI_REGISTRY_IMAGE}:${TAG}
        - kubectl --insecure-skip-tls-verify=true -n bot rollout status deployment/rainfall-notify-deployment

    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success

renovate:
    stage: renovate
    image:
        name: registry.green-rabbit.net:5000/kimata/local_renovate:38

        entrypoint: [""]
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
    rules:
        - if: '$CI_COMMIT_BRANCH != "master"'
          when: never
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
        - changes:
            - renovate.json
